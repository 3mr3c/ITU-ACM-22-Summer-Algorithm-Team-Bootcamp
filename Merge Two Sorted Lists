// Author: Emre Çelik
// Question Link: https://leetcode.com/problems/merge-two-sorted-lists/
// Reviewers: Ahmet Furkan Kavraz, Toygun Görmüş, Yaşar Ceren, Denis Davidoglu

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


// In this problem we have 2 sorted lists and we need to merge 2 of them.

                // 1->2->4
                // 1->3->4
            // 1->1->2->3->4->4

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        // Return list that is not empty when one of our list is empty.
        if (list1 == NULL) {
            return list2;
        }
        if (list2 == NULL) {
            return list1;
        }
            
        // Define our answer list
        ListNode* ans;
        
        /* If first list has bigger value than second list call the function 
        "mergeTwoLists" recursively with list1->next and then assigning 
        the output to ans->next. */
        if (list1 -> val <= list2 -> val) {
            ans = list1;
            ans -> next = mergeTwoLists(list1->next,list2);
        }
        
        else {
            ans = list2;
            ans -> next = mergeTwoLists(list1,list2->next);
        }
        // Return our answer list.
        return ans;
    }
};
